[
  {
    "title": "Portfolio Website",
    "image": "img/pfw.png",
    "short": "Mijn portfolio website waarin projecten dynamisch worden geladen met JavaScript en JSON, gehost via GitHub.",
    "details": "Op deze website kunnen bezoekers mijn projecten bekijken en doorklikken naar de bijbehorende webpagina’s of GitHub-repositories. Daarnaast bevat de site informatie over mijzelf, mijn cv en links naar mijn GitHub- en LinkedIn-profiel. Bezoekers kunnen eenvoudig contact met mij opnemen via e-mail. De website wordt regelmatig bijgewerkt om de gebruiksvriendelijkheid en codekwaliteit te verbeteren.",
    "learned": "Ik heb geleerd hoe je met JSON en JavaScript dynamisch data kunt laden op een website en hoe je een project kunt hosten via GitHub Pages.",
    "tech": "HTML, CSS, JavaScript, JSON",
    "techDisplay": "HTML, CSS, JavaScript, JSON",
    "category": "personal, web",
    "link": "https://github.com/DcamiWraithDev/dcamiwraithdev.github.io "
  },
    {
    "title": "Opendag Applicatie",
    "image": "img/oda.png",
    "short": "Data tonen en beheren met behulp van CSV-bestanden",
    "details": "In dit project heb ik met C# WinForms een applicatie ontwikkeld die data uit CSV-bestanden kan uitlezen, weergeven en toevoegen via een gebruiksvriendelijke interface.",
    "learned": "Geleerd hoe je CSV-data kunt uitlezen, verwerken en integreren in een C#-applicatie.",
    "tech": "C-Sharp, CSV, Winforms",
    "techDisplay": "C#, CSV, Winforms",
    "category": "app",
    "link": "https://github.com/DcamiWraithDev/OpendagApp"
  },
  {
    "title": "Studie Dashboard",
    "image": "img/sdb.png",
    "short": "Data uitlezen en filteren uit een database",
    "details": "In dit project heb ik geleerd hoe je een ERD (Entity Relationship Diagram) opstelt en hoe je met meerdere databasetabellen werkt. Daarnaast heb ik losse SQL-query’s geschreven en een duidelijke mappenstructuur opgezet met aparte classes per tabel en database model voor beter onderhoudbare code.",
    "learned": "Het opzetten van een databaseverbinding in C# met behulp van externe classes en projectstructuren.",
    "tech": "C-Sharp, SQL, Winforms, Database Design",
    "techDisplay": "C#, SQL, Winforms, Database Design",
    "category": "app",
    "link": "https://github.com/DcamiWraithDev/Studie_Dashboard"
  },
  {
    "title": "Groente Boer",
    "image": "img/gb.png",
    "short": "Een kassasysteem voor een groenteboer waarmee producten per categorie kunnen worden geselecteerd, gewogen of per stuk verkocht, en automatisch de totaalprijs wordt berekend.",
    "details": "De applicatie is gebouwd in C# met WinForms en maakt gebruik van een MySQL-database om productgegevens zoals naam, prijs, afbeelding en verkoopt type (gewicht of stuk) op te halen. Producten kunnen via een dynamisch keypad en categorieknoppen worden toegevoegd aan een bestelling. Het systeem berekent automatisch de totaalprijs en laat producten verwijderen of resetten bij afrekenen. Bij dit project heb ik de code van GitHub gepulled en de database opnieuw opgebouwd. In de huidige versie werkt het ophalen van productafbeeldingen niet volledig, waardoor de UI geen productafbeeldingen toont.",
    "learned": "Het werken met een bestaande C# WinForms codebase, het beheren van een MySQL-database en het dynamisch laden van producten en invoer via een keypad.",
    "tech": "C-Sharp, SQL, Winforms, Database Design",
    "techDisplay": "C#, SQL, Winforms, Database Design",
    "category": "app",
    "link": "https://github.com/DcamiWraithDev/GroentenBoer"
  },
  {
    "title": "Weer API",
    "image": "img/wapi.png",
    "short": "Weergegevens ophalen en tonen met de WeerLive API in een C# WinForms-applicatie",
    "details": "In dit project heb ik een C# WinForms-applicatie ontwikkeld die actuele weerinformatie ophaalt via de WeerLive API. De data wordt in JSON-formaat ingeladen, verwerkt en overzichtelijk weergegeven in de interface. Hiervoor heb ik gebruikgemaakt van aparte classes binnen de applicatie om de JSON-structuur te parsen en de API-data efficiënt te beheren.",
    "learned": "Het werken met externe API’s, het verwerken van JSON-data en het dynamisch tonen van gegevens in C# WinForms.",
    "tech": "C-Sharp, JSON, API, Winforms",
    "techDisplay": "C#, JSON, API, Winforms",
    "category": "app",
    "link": "https://github.com/DcamiWraithDev/Weer_API"
  },
  {
    "title": "2D Topdown Shooter Game",
    "image": "img/tdsgame.png",
    "short": "Een actievolle 2D top-down shooter waarin de speler vijanden bestrijdt, items verzamelt.",
    "details": "De speler kan bewegen in alle richtingen met WASD, richten met de muis en vijanden bestrijden met een wapen dat herlaadt. Vijanden patrouilleren, detecteren de speler binnen een gezichtsveld en achtervolgen hem. Het spel bevat health-, ammo- en speciale power-ups, waaronder een Golden Freddy item dat willekeurig de speler kan belonen of schade toebrengen. De camera volgt de speler vloeiend, en UI-elementen tonen gezondheid en ammo in realtime.",
    "learned": "Ik heb geleerd hoe ik een volledige 2D top-down shooter kan opzetten in Unity, inclusief player movement, camera follow, enemy AI met patrouille en gezichtsveld, damage systemen, UI voor health en ammo, en een probabilistisch beloningssysteem met speciale items.",
    "tech": "C-Sharp, Unity, 2D physics, Rigidbody2D, UI, SceneManagement, Audio, Randomization, Prefab instantiation",
    "techDisplay": "C#, Unity, 2D",
    "category": "game",
    "link": "unavailable.html"
  },
  {
    "title": "Local Multiplayer Game",
    "image": "img/lmgame.png",
    "short": "Een 2D local multiplayer platformer met coöperatieve gameplay",
    "details": "In deze game besturen twee spelers hun karakters om levels te voltooien, waarbij ze obstakels vermijden, puzzels oplossen en vijanden ontwijken. De game bevat mechanieken zoals springen, crouchen, super jumps, vijandelijke bewegingen, knoppen die deuren activeren, en een dynamische camera die beide spelers volgt. Verder zijn er een level-progressiesysteem, een end-level scherm met score en tijdsregistratie, en een pauze- en menu-systeem.",
    "learned": "Ik heb geleerd hoe je een volledige 2D platformer opzet in Unity met C#, inclusief multiplayer input handling, physics-based movement, collider management, UI-elementen zoals sliders en canvas, en het structureren van een project met meerdere scripts die samenwerken. Ook heb ik ervaring opgedaan met saving/loading van progressie, animaties via sprites, en debuggen van complexe interacties.",
    "tech": "C-Sharp, Unity, 2D",
    "techDisplay": "C#, Unity, 2D",
    "category": "game",
    "link": "https://github.com/jul1xn/school-local-multiplayer-game"
  },
  {
    "title": "Netflix Clone",
    "image": "img/nfc.png",
    "short": "Een eenvoudige Netflix-clone ontwikkeld als groepsproject met HTML, CSS, JavaScript en Bootstrap.",
    "details": "Dit groepsproject had als doel om de lay-out en basisfunctionaliteiten van Netflix na te bouwen met behulp van HTML, CSS, JavaScript en Bootstrap. Het project hoefde niet volledig functioneel te zijn, maar richtte zich vooral op het nabouwen van de interface, samenwerking binnen het team en het efficiënt verdelen van taken binnen een korte ontwikkelperiode van twee weken.",
    "learned": "Ervaring opgedaan met teamwork, het gebruik van Bootstrap en het vertalen van bestaande webontwerpen naar een werkende front-end.",
    "tech": "HTML, CSS, JavaScript, Bootstrap",
    "techDisplay": "HTML, CSS, JavaScript, Bootstrap",
    "category": "web",
    "link": "unavailable.html"
  },
  {
    "title": "W.I.P.",
    "image": "img/wip.png",
    "short": "W.I.P.",
    "details": "W.I.P.",
    "learned": "W.I.P.",
    "tech": "HTML, CSS, JavaScript, SQL, PHP",
    "techDisplay": "HTML, CSS, JavaScript, SQL, PHP",
    "category": "web, other",
    "link": "unavailable.html"
  },
  {
    "title": "Drone Controller",
    "image": "img/dcp.png",
    "short": "Een C# WinForms-applicatie waarmee een drone bestuurd kan worden via commando’s en JSON-pathbestanden.",
    "details": "In dit project heb ik een C# WinForms-applicatie ontwikkeld waarmee een drone bestuurd kan worden via verschillende commando’s, zoals vooruit, achteruit, links, rechts, stijgen, dalen, roteren en landen. De besturing kan plaatsvinden via knoppen in de interface of met toetsen op het toetsenbord. De gebruiker kan ook de snelheid en rotatie instellen. Daarnaast is er een functie toegevoegd om vluchtpaden op te slaan, te laden en automatisch te laten uitvoeren met behulp van JSON-bestanden. Voor de communicatie met de drone is gebruikgemaakt van een externe library.",
    "learned": "Ervaring opgedaan met externe libraries, het verwerken van JSON-data en het implementeren van besturingslogica in C# WinForms.",
    "tech": "C-Sharp, JSON, API, Winforms",
    "techDisplay": "C#, JSON, API, Winforms",
    "category": "app",
    "link": "https://github.com/DcamiWraithDev/DroneController"
  },
  {
    "title": "Memory Match in C# Winforms",
    "image": "img/mmgame.png",
    "short": "Een C# WinForms-applicatie om Memory Match te spelen met een katten-thema voor twee spelers.",
    "details": "In dit project heb ik samen met een klasgenoot een Memory Match-spel ontwikkeld met een katten-thema. Het spel ondersteunt twee spelers en bevat een timer. Het spel eindigt wanneer alle matches zijn gemaakt, waarbij de speler met de meeste matches wint, of wanneer de timer afloopt, in welk geval er geen winnaar is. Spelers proberen zoveel mogelijk matches te maken voordat het spel op een van deze manieren eindigt.",
    "learned": "Ik heb geleerd om afbeeldingen te beheren, kaarten te randomizen, game-logica te implementeren en gebruikersinteractie te verwerken in C# WinForms.",
    "tech": "C-Sharp, Winforms",
    "techDisplay": "C#, Winforms",
    "category": "app",
    "link": "https://github.com/DcamiWraithDev/MemoryMatch"
  }
]
